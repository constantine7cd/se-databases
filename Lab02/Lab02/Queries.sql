use GIBDD

--N1 ?????????? SELECT, ???????????? ???????? ?????????
/*
select distinct CarName, CarBody
from Cars 
where CarId < 50
order by CarName, CarBody
*/

--N2 ?????????? SELECT, ???????????? ???????? BETWEEN
/*
select distinct SerialNum, DriverId
from DriverLicense
where DateOfIssue between '2010-01-01' and '2013-01-01'
*/

--N3 ?????????? SELECT, ???????????? ???????? LIKE
/*
select distinct *
from Fines 
where Cause like '%busline%'
*/

--N4 ?????????? SELECT, ???????????? ???????? IN ? ????????? ???????????.
/*
select Accidents.CarId, CarName, AccidentId, AmountParticipants
from Accidents join Cars on Accidents.CarId = Cars.CarId
where Accidents.CarId in
	(
		select CarId
		from Cars
		where CarName = 'BYD' or CarName = 'A'
	) and AmountParticipants > 1
*/

--N5 ?????????? SELECT, ???????????? ???????? EXISTS ? ????????? ???????????.
/*
select CarId, CarName, CarVin
from Cars
where exists
	(
		select Cars.CarId
		from Cars as c left  join Accidents as a on c.CarId = a.AccidentId
		where a.AccidentId is not null
	)
*/

--N6 ?????????? SELECT, ???????????? ???????? ????????? ? ?????????.
/*
select FineId, Cost, Cause, DriverId
from Fines
where Cost > ALL
	(
		select Cost 
		from Fines
		where Cause like '%solid%'
	)
*/
--N7 ?????????? SELECT, ???????????? ?????????? ??????? ? ?????????? ????????
/*
select AVG(c) as 'AVG_COST', SUM(c) / COUNT(f) as 'AVG_MANUALLY'
from 
	(
		select Cost as c, FineId as f
		from Fines
		where isPaid = 0
	) as UnpaidCosts
*/

/*
--N8 ?????????? SELECT, ???????????? ????????? ?????????? ? ?????????? ????????.
select DriverId,
(
	select AVG(Cost)
	from Fines
	where Fines.DriverId = Drivers.DriverId
) as avg_fin_cost
from Drivers
where Drivers.Experience > 10
*/

--N9 ?????????? SELECT, ???????????? ??????? ????????? CASE.
/*
declare @cur_month int
set @cur_month = month(getdate())

select LicenseId, SerialNum,
	case month(DateOfIssue)
		when @cur_month then 'this month'
		else 'not this month'
	end as 'This month?'
from DriverLicense as Dr
*/

--N10 ?????????? SELECT, ???????????? ????????? ????????? CASE.
/*
select DriverId,
	case 
		when Experience < 3 then 'Small experience'
		when Experience > 3 and  Experience  < 10 then 'Big experience'
		when Experience > 10 then 'Huge Experience'
	end as 'Experience factor'
from Drivers 
*/


--N11 ???????? ????? ????????? ????????? ??????? ?? ???????????????
--?????? ?????? ?????????? SELECT.
/*
declare @cur_month varchar(3), @cur_year varchar(5), @cur_day varchar(3)

select LicenseId, 
	(
		cast(datediff(year, getdate(), DateOfExpiration) as nvarchar(5))
	) as 'Elapsed Time'
into #ExpTime
from DriverLicense
*/

--N12 ?????????? SELECT, ???????????? ????????? ???????????????
--?????????? ? ???????? ??????????? ?????? ? ??????????? FROM.
/*
select Cost, Cause, IsPaid, Experience
from Fines f join
	(
		select DriverId, Experience
		from Drivers
		where Experience > all
		(
			select AVG(Experience)
			from Drivers
		)
	) as exp_ on f.DriverId = exp_.DriverId
union
select Cost, Cause, IsPaid, Experience
from Fines cf join
	(
		select d.DriverId, Experience
		from Drivers as d join Fines as f on f.DriverId = d.DriverId
		where Cost > all
		(
			select avg(cost)
			from fines
		)

	) as cost on cf.DriverId = cost.DriverId
*/

--N13 ?????????? SELECT, ???????????? ????????? ?????????? ? ??????? ??????????? 3.
/*
select dl.LicenseId, dl.DriverId, dl.DateOfExpiration, d.Experience
from DriverLicense as dl join Drivers as d on dl.DriverId = d.DriverId 
where d.DriverId in
	(
		select DriverId 
		from Fines as f
		where Cost > all
		(
			select avg(cost)
			from Fines
		) and DriverId in
			(
				select DriverId
				from Cars as c join CarsDrivers as cd on c.CarId = cd.CarId
				where year(CarDate) > all
					(
						select avg(year(CarDate))
						from Cars
					)
			)
	)

*/

--N14 ?????????? SELECT, ??????????????? ?????? ? ??????? ??????????? GROUP BY,
--?? ??? ??????????? HAVING.
/*
select CarName, AVG(year(CarDate)) as AVG_Year
from Cars
group by CarName
*/

--N15 ?????????? SELECT, ??????????????? ?????? ? ??????? ??????????? GROUP BY
--? ??????????? HAVING.
/*
select CarName, AVG(year(CarDate)) as AVG_YEAR
from Cars
group by CarName
having AVG(year(CarDate)) > 
	(
		select AVG(year(CarDate)) as AVG_GEN
		from Cars
	)
*/

--INSERT
--N16 ???????????? ?????????? INSERT, ??????????? ??????? ? ??????? ????? ?????? ????????.

/*
insert Accidents(AmountParticipants, AmountOfDied, DateOfAccident, CarId)
values (2, 0, cast('2018-10-01' as date), 54)
*/

--N17 ????????????? ?????????? INSERT, ??????????? ??????? ? ??????? ??????????????? ??????
--?????? ?????????? ??????????.

/*
insert CarsDrivers(DriverId, CarId, IsOwner)
select (
	select min(DriverId)
	from Drivers
	where Experience > 3
), CarId, 1 
from Cars
where CarBody = 'coupe'
*/

--N18 ??????? ?????????? UPDATE.
/*
update Fines 
set cost = cost * 2
where isPaid = 0
*/

--N19 ?????????? UPDATE ?? ????????? ??????????? ? ??????????? SET.
/*
update Fines
set Cost  = Cost * (
	select avg(Experience) / 10
	from Drivers
	where Experience > 3
)
where Cause = 'busline'
*/

--N20 ??????? ?????????? DELETE.
/*
delete Accidents
where AccidentId > 100
*/

--N21 ?????????? DELETE ? ????????? ??????????????? ???????????
--? ??????????? WHERE.

/*
delete Accidents
where AccidentId in 
	(
		select AccidentId 
		from Accidents as a join Cars as c on a.CarId = c.CarId
		where year(CarDate) < 2000 
	)
*/

--N22 ?????????? SELECT, ???????????? ??????? ?????????? ????????? ?????????
/*
;with cte(AccidentDate, DiedAmount)
as 
(
	select a.DateOfAccident, SUM(AmountOfDied) as PerDay
	from Accidents as a
	where year(DateOfAccident) > 2010
	group by DateOfAccident
)
select AVG(DiedAmount) as 'DM'
from cte
*/

--N23 ?????????? SELECT, ???????????? ??????????? ?????????? ????????? ?????????.
/*
create table departments
(
	DepartmentId int not null primary key identity(1, 1),
	DepartmentName nvarchar(30) not null,
	HigherDepartmentId int null,
	AmountOfEmployees int not null
);
go

insert departments(DepartmentName, HigherDepartmentId, AmountOfEmployees)
values ('Central', null, 100),
('South', 1, 40),
('North', 1, 35),
('West', 1, 20),
('East', 1, 56),
('North-west', 3, 4),
('North-east', 3, 46),
('South-west', 4, 34),
('South-east', 4, 23),
('Pupkino', 6, 29),
('Laptino', 8, 32);
GO
*/
/*
;with dep_hierarchy(DepartmentId, DepartmentName, HigherDepartmentId, AmountOfEmployees, Priority)
as 
(
	select d.DepartmentId, d.DepartmentName, d.HigherDepartmentId, d.AmountOfEmployees, 0 as Priority
	from departments as d
	where d.HigherDepartmentId is null
	union all
	select e.DepartmentId, e.DepartmentName, e.HigherDepartmentId, e.AmountOfEmployees, Priority + 1
	from departments as e join dep_hierarchy as dep on e.HigherDepartmentId = dep.DepartmentId
)
select DepartmentId, DepartmentName, HigherDepartmentId, AmountOfEmployees, Priority
from dep_hierarchy
*/


--N24 ??????? ???????. ????????????? ??????????? MIN/MAX/AVG OVER()
/*
select d.Experience, d.DriverId, FineId, cost,
avg(cost) over (partition by d.Experience) as avg_cost,
min(cost) over (partition by d.Experience) as min_cost,
max(cost) over (partition by d.Experience) as max_cost
from Drivers as d left join Fines as f on f.DriverId = d.DriverId
*/

--N25 
/*
;with cte
as
(
	select Cost, Cause, IsPaid, DriverId
	from Fines
	where Cost > 8000 or cause = 'busline'
)
insert Fines(Cost, Cause, IsPaid, DriverId)
select *
from cte
*/

/*
;with cte2
as
(
	select *,  ROW_NUMBER() over (partition by Cost, Cause, IsPaid, DriverId order by(Cost)) as n
	from Fines
)
delete from cte2
where n > 1
*/

from
(
	select CarName, CarVin, CarDate, CarBody
	from Cars
	where CarName = 'Ac'
)
into Cars

--Additional
